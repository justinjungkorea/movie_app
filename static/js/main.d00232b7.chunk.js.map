{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","alt","react_default","a","createElement","src","title","className","MovieGenre","_ref3","genre","Movie","_ref","genres","summary","rating","build_default","starRatedColor","numberOfStars","starDimension","starSpacing","map","index","key","dist_default","text","min","ideal","App","state","num","movies","maximumPage","_renderMovies","_this","movie","src_Movie","title_english","medium_cover_image","id","_firstPage","_callee","firstMovies","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","_getMovies","_callee2","items","newMovies","_context2","slice","concat","page","fetch","then","response","json","data","catch","err","console","log","_loaditems","this","_this2","length","InfiniteLoader_default","onVisited","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d00232b7.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from 'prop-types';\nimport StarRatings from 'react-star-ratings'\nimport ReadMoreReact from 'read-more-react'\nimport \"./Movie.css\";\n\nfunction Movie({title, poster, genres, summary, rating}){\n  return (\n    <div className=\"Movie\">\n      <div className=\"Movie__Columns\">\n        <MoviePoster poster={poster} alt={title} />\n      </div>\n      <div className=\"Movie__Columns\">\n        <h1>{title}</h1>\n        <div className=\"Movie__Rating\">\n          <StarRatings\n            rating={rating / 2}\n            starRatedColor=\"#FFBA02\"\n            numberOfStars={5}\n            starDimension=\"20px\"\n            starSpacing=\"2px\"\n          />\n        </div>\n        <div className=\"Movie__Genres\">\n          {genres.map((genre, index) => (\n            <MovieGenre genre={genre} key={index} />\n          ))}\n        </div>\n        <div className=\"Movie__Summary\">\n          <ReadMoreReact text={summary} min={80} ideal={100} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction MoviePoster({poster, alt}){\n  return <img src={poster} title={alt} className=\"Movie__Poster\" alt={alt} />;\n}\n\nfunction MovieGenre({genre}){\n  return <span className=\"Movie__Genre\">{genre} </span>\n}\n\nMovie.propTypes = {\n  title: PropTypes.string.isRequired,\n  poster: PropTypes.string.isRequired,\n  genres: PropTypes.array.isRequired,\n  summary: PropTypes.string.isRequired,\n  rating: PropTypes.number.isRequired\n}\n\nMoviePoster.propTypes = {\n  poster: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired\n}\n\nMovieGenre.propTypes = {\n  genre: PropTypes.string.isRequired\n}\n\nexport default Movie;","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie';\nimport InfiniteLoader from \"react-infinite-loader\";\n\nclass App extends Component {\n  state = {\n    num:1,\n    movies: [],\n    maximumPage:100\n  };\n \n\n  componentDidMount() {\n    this._firstPage();\n  }\n\n  _renderMovies = () => {\n    const items = this.state.movies.map(movie => {\n      return (<Movie\n          title={movie.title_english}\n          poster={movie.medium_cover_image}\n          key={movie.id}\n          genres={movie.genres}\n          rating={movie.rating}\n          summary={movie.summary}\n        />);\n    });\n    return items;\n  };\n\n  _firstPage = async () => {\n    const firstMovies = await this._callApi(1);\n    this.setState({\n      movies: firstMovies\n    });\n  }\n\n  _getMovies = async (num) => {\n    let items = this.state.movies.slice();\n    const newMovies = await this._callApi(num);\n    items = items.concat(newMovies);\n    this.setState({ \n      movies: items\n    });\n  };\n\n  _callApi = (page) => {\n    return fetch(\"https://yts.am/api/v2/list_movies.json?sort_by=rating&limit=50&page=\"+page)\n      .then(response => response.json())\n      .then(json => json.data.movies)\n      .catch(err => console.log(err));\n  };\n\n  _loaditems = () => {\n      this.state.num++;\n      this._getMovies(this.state.num);\n  };\n\n  render() {\n    console.log(this.state.movies.length);\n    return (\n      <div className={this.state.movies.length !== 0 ? \"App\" : \"App--loading\"}>\n        {this.state.movies.length !== 0 ? this._renderMovies() : \"Loading...\"}\n        <div>\n          {this.state.num<3 ? <InfiniteLoader onVisited={() => this._loaditems()} /> : <p></p>}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}